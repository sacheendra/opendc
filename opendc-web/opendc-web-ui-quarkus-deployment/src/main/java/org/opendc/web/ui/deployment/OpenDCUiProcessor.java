/*
 * Copyright (c) 2022 AtLarge Research
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.opendc.web.ui.deployment;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.quarkus.deployment.annotations.BuildProducer;
import io.quarkus.deployment.annotations.BuildStep;
import io.quarkus.deployment.annotations.ExecutionTime;
import io.quarkus.deployment.annotations.Record;
import io.quarkus.deployment.builditem.FeatureBuildItem;
import io.quarkus.deployment.builditem.ShutdownContextBuildItem;
import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;
import io.quarkus.maven.dependency.GACT;
import io.quarkus.maven.dependency.ResolvedDependency;
import io.quarkus.paths.PathVisit;
import io.quarkus.vertx.http.deployment.HttpRootPathBuildItem;
import io.quarkus.vertx.http.deployment.RouteBuildItem;
import io.quarkus.vertx.http.deployment.webjar.WebJarBuildItem;
import io.quarkus.vertx.http.deployment.webjar.WebJarResourcesFilter;
import io.quarkus.vertx.http.deployment.webjar.WebJarResultsBuildItem;
import io.vertx.core.Handler;
import io.vertx.ext.web.RoutingContext;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.function.BooleanSupplier;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.opendc.web.ui.runtime.OpenDCUiRecorder;
import org.opendc.web.ui.runtime.OpenDCUiRuntimeConfig;

/**
 * Build processor for the OpenDC web UI Quarkus extension.
 */
public class OpenDCUiProcessor {

    private static final String FEATURE = "opendc-ui";
    private static final GACT OPENDC_UI_WEBJAR_ARTIFACT_KEY = new GACT("org.opendc.web", "opendc-web-ui", null, "jar");
    private static final String OPENDC_UI_WEBJAR_STATIC_RESOURCES_PATH = "META-INF/resources/opendc-web-ui";
    private static final Pattern PATH_PARAM_PATTERN = Pattern.compile("\\[(\\w+)]");

    private final ObjectMapper objectMapper = new ObjectMapper();

    /**
     * Provide the {@link FeatureBuildItem} for this Quarkus extension.
     */
    @BuildStep(onlyIf = IsIncluded.class)
    public FeatureBuildItem feature() {
        return new FeatureBuildItem(FEATURE);
    }

    /**
     * Build the WebJar that is used to serve the Next.js resources.
     */
    @BuildStep(onlyIf = IsIncluded.class)
    public WebJarBuildItem buildWebJar(OpenDCUiConfig config) {
        return WebJarBuildItem.builder()
                .artifactKey(OPENDC_UI_WEBJAR_ARTIFACT_KEY)
                .root(OPENDC_UI_WEBJAR_STATIC_RESOURCES_PATH)
                .onlyCopyNonArtifactFiles(false)
                .useDefaultQuarkusBranding(false)
                .filter(new InsertVariablesResourcesFilter(config))
                .build();
    }

    /**
     * Build the Next.js routes based on the route manifest generated by it.
     */
    @BuildStep(onlyIf = IsIncluded.class)
    public OpenDCUiRoutingBuildItem buildRoutes(CurateOutcomeBuildItem curateOutcomeBuildItem) throws IOException {
        ResolvedDependency dependency = getAppArtifact(curateOutcomeBuildItem, OPENDC_UI_WEBJAR_ARTIFACT_KEY);
        PathVisit visit = dependency
                .getContentTree()
                .apply(OPENDC_UI_WEBJAR_STATIC_RESOURCES_PATH + "/routes-manifest.json", v -> v);

        if (visit == null) {
            throw new FileNotFoundException("Cannot find routes-manifest.json");
        }

        JsonNode routeManifest = objectMapper.readTree(visit.getUrl());

        var pages = new ArrayList<OpenDCUiRoutingBuildItem.Page>();
        for (Iterator<JsonNode> it = routeManifest.get("staticRoutes").elements(); it.hasNext(); ) {
            JsonNode route = it.next();

            String page = route.get("page").asText();

            // Static routes do not have any path parameters
            pages.add(new OpenDCUiRoutingBuildItem.Page(page, page));
        }

        for (Iterator<JsonNode> it = routeManifest.get("dynamicRoutes").elements(); it.hasNext(); ) {
            JsonNode route = it.next();

            String page = route.get("page").asText();
            String path = PATH_PARAM_PATTERN.matcher(page).replaceAll(r -> ":" + r.group(1));

            pages.add(new OpenDCUiRoutingBuildItem.Page(path, page));
        }

        var redirects = new ArrayList<OpenDCUiRoutingBuildItem.Redirect>();
        for (Iterator<JsonNode> it = routeManifest.get("redirects").elements(); it.hasNext(); ) {
            JsonNode redirect = it.next();
            if (redirect.has("internal")) {
                continue;
            }

            int statusCode = redirect.get("statusCode").asInt();
            String path = redirect.get("source").asText();
            String destination = redirect.get("destination").asText();

            if (path.isEmpty()) {
                path = "/";
            }

            redirects.add(new OpenDCUiRoutingBuildItem.Redirect(path, destination, statusCode));
        }

        var custom404 = routeManifest.get("pages404").asBoolean();
        return new OpenDCUiRoutingBuildItem(pages, redirects, custom404);
    }

    /**
     * Register the HTTP handles for the OpenDC web UI.
     */
    @BuildStep(onlyIf = IsIncluded.class)
    @Record(ExecutionTime.RUNTIME_INIT)
    public void registerOpenDCUiHandler(
            OpenDCUiRecorder recorder,
            BuildProducer<RouteBuildItem> routes,
            HttpRootPathBuildItem httpRootPathBuildItem,
            WebJarResultsBuildItem webJarResultsBuildItem,
            OpenDCUiRoutingBuildItem openDCUiBuildItem,
            OpenDCUiRuntimeConfig runtimeConfig,
            ShutdownContextBuildItem shutdownContext) {

        WebJarResultsBuildItem.WebJarResult result =
                webJarResultsBuildItem.byArtifactKey(OPENDC_UI_WEBJAR_ARTIFACT_KEY);
        if (result == null) {
            return;
        }

        String basePath = httpRootPathBuildItem.getRootPath();
        String finalDestination = result.getFinalDestination();

        /* Construct dynamic routes */
        for (var redirect : openDCUiBuildItem.getRedirects()) {
            String destination =
                    basePath.equals("/") ? redirect.getDestination() : basePath + redirect.getDestination();

            routes.produce(httpRootPathBuildItem
                    .routeBuilder()
                    .route(basePath + redirect.getPath())
                    .handler(recorder.redirectHandler(destination, redirect.getStatusCode(), runtimeConfig))
                    .build());
        }

        for (var page : openDCUiBuildItem.getPages()) {
            routes.produce(httpRootPathBuildItem
                    .routeBuilder()
                    .route(basePath + page.getPath())
                    .handler(recorder.pageHandler(finalDestination, page.getName(), runtimeConfig))
                    .build());
        }

        /* Construct static routes */
        Handler<RoutingContext> staticHandler = recorder.staticHandler(
                finalDestination, basePath, result.getWebRootConfigurations(), runtimeConfig, shutdownContext);

        routes.produce(httpRootPathBuildItem
                .routeBuilder()
                .route("*")
                .handler(staticHandler)
                .build());
    }

    /**
     * A {@link WebJarResourcesFilter} that instantiates the variables in the web jar resource.
     */
    private static class InsertVariablesResourcesFilter implements WebJarResourcesFilter {

        private static final String HTML = ".html";
        private static final String CSS = ".css";
        private static final String JS = ".js";

        private final OpenDCUiConfig config;

        public InsertVariablesResourcesFilter(OpenDCUiConfig config) {
            this.config = config;
        }

        @Override
        public FilterResult apply(String fileName, InputStream stream) throws IOException {
            if (stream == null) {
                return new FilterResult(null, false);
            }

            // Allow replacement of variables in HTML, CSS, and JavaScript files
            if (fileName.endsWith(HTML) || fileName.endsWith(CSS) || fileName.endsWith(JS)) {
                byte[] oldContentBytes = stream.readAllBytes();
                String oldContents = new String(oldContentBytes);
                String contents = substituteVariables(oldContents, this::substitute);

                boolean changed = contents.length() != oldContents.length() || !contents.equals(oldContents);
                if (changed) {
                    return new FilterResult(new ByteArrayInputStream(contents.getBytes()), true);
                } else {
                    return new FilterResult(new ByteArrayInputStream(oldContentBytes), false);
                }
            }

            return new FilterResult(stream, false);
        }

        private String substitute(String var) {
            switch (var) {
                case "NEXT_PUBLIC_API_BASE_URL":
                    return config.apiBaseUrl;
                case "NEXT_PUBLIC_SENTRY_DSN":
                    return config.sentryDsn.orElse("");
                case "NEXT_PUBLIC_AUTH0_DOMAIN":
                    return config.auth.domain.orElse("");
                case "NEXT_PUBLIC_AUTH0_CLIENT_ID":
                    return config.auth.clientId.orElse("");
                case "NEXT_PUBLIC_AUTH0_AUDIENCE":
                    return config.auth.audience.orElse("");
                default:
                    return null;
            }
        }

        /**
         * Pattern to match variables in the OpenDC web UI sources specified using the following format: "%%VAR_NAME%%".
         * <p>
         * Be aware that to properly handle Next.js base path, we need to also match a possible forward slash in front
         * of the variable.
         */
        private static final Pattern PATTERN = Pattern.compile("%%(\\w+)%%");

        /**
         * Helper method to substitute variables in the OpenDC web UI.
         */
        private static String substituteVariables(String contents, Function<String, String> substitute) {
            Matcher m = PATTERN.matcher(contents);
            StringBuilder sb = new StringBuilder();

            while (m.find()) {
                String group = m.group(1);
                String val = substitute.apply(group);
                m.appendReplacement(sb, val != null ? val : group);
            }

            m.appendTail(sb);
            return sb.toString();
        }
    }

    /**
     * A {@link BooleanSupplier} to determine if the OpenDC web UI extension should be included.
     */
    private static class IsIncluded implements BooleanSupplier {
        OpenDCUiConfig config;

        @Override
        public boolean getAsBoolean() {
            return config.include;
        }
    }

    private static ResolvedDependency getAppArtifact(CurateOutcomeBuildItem curateOutcomeBuildItem, GACT artifactKey) {
        for (ResolvedDependency dep :
                curateOutcomeBuildItem.getApplicationModel().getDependencies()) {
            if (dep.getKey().equals(artifactKey)) {
                return dep;
            }
        }
        throw new RuntimeException("Could not find artifact " + artifactKey + " among the application dependencies");
    }
}
